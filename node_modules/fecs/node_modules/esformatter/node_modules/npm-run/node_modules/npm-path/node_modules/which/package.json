{
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me"
  },
  "name": "which",
  "description": "Like which(1) unix command. Find the first instance of an executable in the PATH.",
  "version": "1.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/node-which.git"
  },
  "main": "which.js",
  "bin": {
    "which": "./bin/which"
  },
  "license": "ISC",
  "dependencies": {
    "is-absolute": "^0.1.7"
  },
  "devDependencies": {
    "mkdirp": "^0.5.0",
    "rimraf": "^2.3.3",
    "tap": "^1.0.2"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "readme": "# which\n\nLike the unix `which` utility.\n\nFinds the first instance of a specified executable in the PATH\nenvironment variable.  Does not cache the results, so `hash -r` is not\nneeded when the PATH changes.\n\n## USAGE\n\n```javascript\nvar which = require('which')\n\n// async usage\nwhich('node', function (er, resolvedPath) {\n  // er is returned if no \"node\" is found on the PATH\n  // if it is found, then the absolute path to the exec is returned\n})\n\n// sync usage\n// throws if not found\nvar resolved = which.sync('node')\n\n// Pass options to override the PATH and PATHEXT environment vars.\nwhich('node', { path: someOtherPath }, function (er, resolved) {\n  if (er)\n    throw er\n  console.log('found at %j', resolved)\n})\n```\n\n## OPTIONS\n\nIf you pass in options, then `path` and `pathExt` are relevant.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/isaacs/node-which/issues"
  },
  "homepage": "https://github.com/isaacs/node-which",
  "_id": "which@1.1.1",
  "_shasum": "9ce512459946166e12c083f08ec073380fc8cbbb",
  "_from": "which@>=1.1.1 <2.0.0",
  "_resolved": "https://registry.npmjs.org/which/-/which-1.1.1.tgz"
}
